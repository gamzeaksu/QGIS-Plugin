# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DistancePlugin
                                 A QGIS plugin
 Finds the distance between selected points.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-01-02
        git sha              : $Format:%H$
        copyright            : (C) 2022 by DistancePlugin
        email                : DistancePlugin
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import *
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .DistancePlugin_dialog import DistancePluginDialog
import os.path
from qgis.core import QgsProject
from qgis.utils import iface

class DistancePlugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'DistancePlugin_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Distances Between Points')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('DistancePlugin', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/DistancePlugin/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Distance Between Points'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&DistancePlugin'),
                action)
            self.iface.removeToolBarIcon(action)
            
    
    col_count = 0
    row_count = 0
    def show(self):
 
        try: 
            layers = QgsProject.instance().layerTreeRoot().children()
            idx = self.dlg.comboBox.currentIndex()
            selectedLayer = layers[idx].layer() 
            
            d = ["X","Y"]
            field = d + [f.name() for f in selectedLayer.fields()]
            self.col_count = len(field)
            features = selectedLayer.getFeatures()
            self.row_count =len(list(features))
        
            
            values = list()
       
    
            for f in selectedLayer.getFeatures():
                attributes = f.attributes()
                
                geom = f.geometry()
                y= geom.asPoint().y()
                x= geom.asPoint().x()
                x = round(x,3)
                y = round(y,3)
                attributes =  [x,y] + attributes
                values.append(attributes)
    
            self.dlg.twPoints.setRowCount(self.row_count)
            self.dlg.twPoints.setColumnCount(self.col_count)
            self.dlg.twPoints.setHorizontalHeaderLabels(field)
            for i in range(self.row_count):
                for j in range(self.col_count):
                    self.dlg.twPoints.setItem(i,j,QTableWidgetItem(str(values[i][j])))

        except AttributeError as err:
            warning = err
            QMessageBox.warning(self.dlg.show(), self.tr("Warning"), self.tr(str(warning)),QMessageBox.Ok) 
        except IndexError:
            warning = "A layer must be added first to show the points!"
            QMessageBox.warning(self.dlg.show(), self.tr("Warning"), self.tr(str(warning)),QMessageBox.Ok)     
        except TypeError:
            warning = "The layer you select must be a layer with a point geometry type only!"
            QMessageBox.warning(self.dlg.show(), self.tr("Warning"), self.tr(str(warning)),QMessageBox.Ok)        
    
        #self.dlg.twPoints.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch) 
        
  
    count = 0
    coordinates = list()
    row1 = 0
    row2 = 0
    def select(self):
        
        if self.count %2 == 0:
            self.row1 = self.dlg.twPoints.currentRow()
            self.dlg.lbl_selectedLayer.setText("Row number of the 1st selected point: "+ str(self.row1+1))
            
            x = float(self.dlg.twPoints.item(self.row1,0).text())
            y = float(self.dlg.twPoints.item(self.row1,1).text())
            
            self.coordinates.append([x,y])
            self.count +=1
         
        else:
            self.row2 = self.dlg.twPoints.currentRow()
            self.dlg.lbl_selectedLayer_2.setText("Row number of the 2nd selected point: "+ str(self.row2+1))
               
            x = float(self.dlg.twPoints.item(self.row2,0).text())
            y = float(self.dlg.twPoints.item(self.row2,1).text())
            
            self.coordinates.append([x,y])
        
            self.count +=1            

      

    def euclidean(self,coordinates):
        c = coordinates
        x1,y1 = c[0]
        x2,y2 = c[1]
    
        return pow((pow((x2-x1),2) + pow((y2-y1),2)),0.5)
    
    def manhattan(self,coordinates):
        c = coordinates
        x1,y1 = c[0]
        x2,y2 = c[1]
        return abs(x1-x2) + abs(y1-y2)
    
    def chebyshev (self,coordinates):
        c = coordinates
        x1,y1 = c[0]
        x2,y2 = c[1]
        return max(abs((x2-x1)),abs((y2-y1)))
    
    dist_count = 0 #mesafeler tablosuna eklenecek olan mesafe sayısı
    def calculate(self):
        try:  
            e = self.euclidean(self.coordinates)
            
            m = self.manhattan(self.coordinates)
    
            c = self.chebyshev(self.coordinates)
           
            i = self.dist_count
            self.dlg.twDistances.setRowCount(i+1)
            self.dlg.twDistances.setColumnCount(4)
            
            dist = ["Points","euclidean","manhattan","chebyshev"]
            self.dlg.twDistances.setHorizontalHeaderLabels(dist)
            
            points = str(self.row1+1)+" - " + str(self.row2+1)
            self.dlg.twDistances.setItem(i,0,QTableWidgetItem(points))
            
            self.dlg.twDistances.setItem(i,1,QTableWidgetItem(str(round(e,3))))
            self.dlg.twDistances.setItem(i,2,QTableWidgetItem(str(round(m,3))))
            self.dlg.twDistances.setItem(i,3,QTableWidgetItem(str(round(c,3))))
            self.coordinates = list()
            self.dist_count += 1
        except:
            warning = "Please select 2 points before calculating!"
            QMessageBox.warning(self.dlg.show(), self.tr("Warning"), self.tr(str(warning)),QMessageBox.Ok)

                  
        self.dlg.twDistances.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.dlg.lbl_selectedLayer.setText("Row number of the 1st selected point: ")
        self.dlg.lbl_selectedLayer_2.setText("Row number of the 2nd selected point: ")

        
    dist_count_qgis = 0 #mesafeler tablosuna eklenecek olan mesafe sayısı
    def calculate_qgis(self):
        try:  
            e = self.euclidean(self.coordinates_qgis)
            
            m = self.manhattan(self.coordinates_qgis)
    
            c = self.chebyshev(self.coordinates_qgis)
     
            i = self.dist_count_qgis
            self.dlg.twDistancesQGIS.setRowCount(i+1)
            self.dlg.twDistancesQGIS.setColumnCount(4)
            
            dist = ["Points","euclidean","manhattan","chebyshev"]
            self.dlg.twDistancesQGIS.setHorizontalHeaderLabels(dist)
            p = self.fid[0] +" - " + self.fid[1]
            self.dlg.twDistancesQGIS.setItem(i,0,QTableWidgetItem(p))
               
            self.dlg.twDistancesQGIS.setItem(i,1,QTableWidgetItem(str(round(e,3))))
            self.dlg.twDistancesQGIS.setItem(i,2,QTableWidgetItem(str(round(m,3))))
            self.dlg.twDistancesQGIS.setItem(i,3,QTableWidgetItem(str(round(c,3))))
            self.dist_count_qgis += 1   
        except:
            warning = "Please select 2 points before calculating!"
            QMessageBox.warning(self.dlg.show(), self.tr("Warning"), self.tr(str(warning)),QMessageBox.Ok)   
           
        self.dlg.twDistancesQGIS.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)  
        self.fid = []

    fid = [] 
    coordinates_qgis = list()
    def showPoints(self):
        layer = iface.activeLayer()        
        self.coordinates_qgis = list()
        values = list()
        fid = [] 
        try:
            for f in layer.selectedFeatures():
                attributes = f.attributes()
                
                geom = f.geometry()
                y= geom.asPoint().y()
                x= geom.asPoint().x()
                attributes =  [x,y] + attributes
                values.append(attributes)
                self.coordinates_qgis.append([x,y])
                self.fid.append(str(f.id()))
                
           
            d = ["X","Y"]
            field = d + [f.name() for f in layer.fields()]
            col_count = len(field)
            self.dlg.twSelectedPoints.setRowCount(2)
            self.dlg.twSelectedPoints.setColumnCount(col_count)
            self.dlg.twSelectedPoints.setHorizontalHeaderLabels(field)
            for i in range(2):
                for j in range(col_count):
                    self.dlg.twSelectedPoints.setItem(i,j,QTableWidgetItem(str(values[i][j])))
                    
        except TypeError:
            warning = "The layer you select must be a layer with a point geometry type only!"
            QMessageBox.warning(self.dlg.show(), self.tr("Warning"), self.tr(str(warning)),QMessageBox.Ok) 
        except IndexError:
            warning = "Please select two points in QGIS first!"
            QMessageBox.warning(self.dlg.show(), self.tr("Warning"), self.tr(str(warning)),QMessageBox.Ok)   
            
        #self.dlg.twSelectedPoints.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)    
    
      
    def clear (self):
        self.count = 0
        self.coordinates = list()
        self.dist_count = 0
       
        self.dlg.twPoints.clear()
        self.dlg.twDistances.clear()
        
        self.dlg.lbl_selectedLayer.setText("Row number of the 1st selected point: ")
        self.dlg.lbl_selectedLayer_2.setText("Row number of the 2nd selected point: ")
    def update(self):    
        #combobox
        layers = QgsProject.instance().layerTreeRoot().children()
        
        self.dlg.comboBox.clear()
        self.dlg.comboBox.addItems([l.name()for l in layers])        

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = DistancePluginDialog()

        self.dlg = DistancePluginDialog()
        
        self.dlg.lbl_selectedLayer.setText("Row number of the 1st selected point: ")
        self.dlg.lbl_selectedLayer_2.setText("Row number of the 2nd selected point: ")

        #combobox
        layers = QgsProject.instance().layerTreeRoot().children()
        
        self.dlg.comboBox.clear()
        self.dlg.comboBox.addItems([l.name()for l in layers])
        
        
        #tab1     
        self.dlg.pbUpdate.clicked.connect(self.update)
        self.dlg.pbShow.clicked.connect(self.show)
        self.dlg.pbCalculate.clicked.connect(self.calculate)
        self.dlg.pbClear.clicked.connect(self.clear)
        
        
        self.dlg.twPoints.clicked.connect(self.select)
        
        self.dist_count = 0
        self.coordinates = []
  
        #tab2
        self.dlg.pbSelected.clicked.connect(self.showPoints)
        self.dlg.pbCalculate_2.clicked.connect(self.calculate_qgis)
        
        self.dist_count_qgis = 0
        self.coordinates_qgis = []

        # show the dialog
        self.dlg.show()
  
